name: CI/CD - Build and Push Images

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository_owner }}/ticketer

jobs:
  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
      packages: write
      id-token: write

    strategy:
      fail-fast: false
      matrix:
        include:
          - service: auth
            context: ./auth
            dockerfile: ./auth/Dockerfile
          - service: event
            context: ./event
            dockerfile: ./event/Dockerfile
          - service: ticket
            context: ./ticket
            dockerfile: ./ticket/Dockerfile
          - service: payment
            context: ./payment
            dockerfile: ./payment/Dockerfile
          - service: frontend
            context: .
            dockerfile: ./Dockerfile

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service }}
          tags: |
            type=raw,value=latest
            type=sha,prefix={{branch}}-

      - name: Build and push ${{ matrix.service }}
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
          sbom: false

  summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: build-and-push
    if: always()

    steps:
      - name: Build Status
        run: |
          if [ "${{ needs.build-and-push.result }}" == "success" ]; then
            echo "‚úÖ All images built successfully!"
            if [ "${{ github.event_name }}" != "pull_request" ]; then
              echo "üì¶ Images pushed to ghcr.io/${{ github.repository_owner }}/ticketer-*"
              echo ""
              echo "To deploy manually, run:"
              echo "  cd terraform && terraform apply"
              echo "  cd .. && ./scripts/deploy.sh"
            fi
          else
            echo "‚ùå Build failed"
            exit 1
          fi
